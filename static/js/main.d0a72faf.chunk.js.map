{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ErrorMassage/ErrorMassage.module.css","components/Filter/Filter.module.css","App.module.css","redux/actions/action.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/ErrorMassage/ErrorMassage.js","App.js","redux/reducers/reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","removeContact","changeFilter","erroMasage","INITIAL_STATE","name","number","ContactForm","state","handleChange","e","target","value","setState","handleSubmit","preventDefault","console","log","props","contacts","find","item","setTimeout","CSSTransition","in","classNames","timeout","appear","unmountOnExit","className","classes","tilie","contactFormConteiner","action","contactForm","onSubmit","this","lableName","htmlFor","type","placeholder","onChange","Component","mapDispatchToProps","connect","items","filterRender","filter","visibleFilter","length","title","deleteItem","array","contactItem","toLowerCase","includes","TransitionGroup","component","map","onClick","id","errorMassage","conteiner","classesEror","initialState","JSON","parse","localStorage","getItem","itemsCreateReducer","createReducer","payload","uuidv4","filterCreateReducer","erroMasageCreateReducer","contactsReducer","combineReducers","store","configureStore","reducer","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0a72faf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tilie\":\"ContactForm_tilie__3ScqB\",\"contactFormConteiner\":\"ContactForm_contactFormConteiner__2nPws\",\"lableName\":\"ContactForm_lableName__3PVId\",\"contactForm\":\"ContactForm_contactForm__1Uwbi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMassage\":\"ErrorMassage_errorMassage__35Aol\",\"enter\":\"ErrorMassage_enter___PW3_\",\"enterActive\":\"ErrorMassage_enterActive__13R6N\",\"exit\":\"ErrorMassage_exit__2U7Rg\",\"exitActive\":\"ErrorMassage_exitActive__1nqwD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__2BtNx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner\":\"App_conteiner__NreQ0\"};","import { createAction } from '@reduxjs/toolkit';\r\n// ----------without Toolkit--------------\r\n// import {\r\n//   ADD_CONTACT,\r\n//   REMOVE_CONTACT,\r\n//   CHANGE_FILTER,\r\n//   ERROR_MESSAGE,\r\n// } from '../actionTypes.js';\r\n\r\n// const addContact = contact => ({\r\n//   type: ADD_CONTACT,\r\n//   payload: contact,\r\n// });\r\n// const addContact = createAction(ADD_CONTACT);\r\n\r\n// const removeContact = id => ({\r\n//   type: REMOVE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\n// const changeFilter = filter => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: filter,\r\n// });\r\n\r\n// const erroMasage = payload => ({\r\n//   type: ERROR_MESSAGE,\r\n//   payload: payload,\r\n// });\r\n\r\n// export default { addContact, removeContact, changeFilter };\r\n\r\n// ----with Toolkit----\r\nconst addContact = createAction('ADD_CONTACT');\r\nconst removeContact = createAction('REMOVE_CONTACT');\r\nconst changeFilter = createAction('CHANGE_FILTER');\r\nconst erroMasage = createAction('ERROR_MESSAGE');\r\nexport { addContact, removeContact, changeFilter, erroMasage };\r\n","import React, { Component } from 'react';\r\nimport classes from './ContactForm.module.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../../components/anime.css';\r\n// import { v4 as uuidv4 } from 'uuid';\r\nimport { addContact, erroMasage } from '../../redux/actions/action.js';\r\nimport { connect } from 'react-redux';\r\n\r\n//\r\n\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    ...INITIAL_STATE,\r\n  };\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      // id: uuidv4(),\r\n      [name]: value,\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    // this.props.addContact({ ...this.state });\r\n    console.log(this.props.contacts);\r\n    if (this.props.contacts.find(item => item.name === this.state.name)) {\r\n      this.props.erroMasage('Is already in contacts.');\r\n      setTimeout(() => {\r\n        this.props.erroMasage('');\r\n      }, 1500);\r\n    } else {\r\n      this.props.addContact(this.state);\r\n    }\r\n    this.setState({ name: '', number: '' }); //1 варіант очищаю input після submit(відправки)\r\n    // this.setState(INITIAL_STATE);  //2 варіант очищаю input після submit(відправки)\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={true}\r\n          classNames=\"logo\"\r\n          timeout={500}\r\n          appear={true}\r\n          unmountOnExit\r\n        >\r\n          <h2 className={classes.tilie}>Phonebook</h2>\r\n        </CSSTransition>\r\n        <div className={classes.contactFormConteiner}>\r\n          <form\r\n            action=\"submit\"\r\n            className={classes.contactForm}\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <div className={classes.lableName}>\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"enter name\"\r\n                value={this.state.name}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n\r\n            <div className={classes.lableName}>\r\n              <label htmlFor=\"number\">Number</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"number\"\r\n                placeholder=\"enter number\"\r\n                value={this.state.number}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n            <button type=\"submit\">Add contacts</button>\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   addContact: contact => {\r\n//     dispatch(addContact(contact));\r\n//   },\r\n// });\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n  erroMasage,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from './Filter.module.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../../components/anime.css';\r\nimport '../anime.css';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter } from '../../redux/actions/action.js';\r\n\r\nfunction Filter({ filter, filterRender, visibleFilter }) {\r\n  // console.log(visibleFilter);\r\n  return (\r\n    <CSSTransition\r\n      in={visibleFilter}\r\n      timeout={250}\r\n      appear={true}\r\n      classNames=\"logo\"\r\n      unmountOnExit\r\n    >\r\n      <label>\r\n        <h2 className={classes.title}>Filter</h2>\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          placeholder=\"Finder\"\r\n          value={filter}\r\n          onChange={e => filterRender(e.target.value)}\r\n        />\r\n      </label>\r\n    </CSSTransition>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  filterRender: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  filterRender: changeFilter,\r\n};\r\nconst mapStateToProps = state => {\r\n  // console.log(state.contacts.items);\r\n  const { filter, items } = state.contacts;\r\n  return {\r\n    filter: filter,\r\n    visibleFilter: items.length > 1,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactList.css';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport '../../components/anime.css';\r\nimport { removeContact } from '../../redux/actions/action.js';\r\n\r\nconst ContactList = function ({ array, deleteItem }) {\r\n  return (\r\n    <>\r\n      <TransitionGroup component=\"ul\" className=\"contactList\">\r\n        {array.map(item => (\r\n          <CSSTransition key={item.id} timeout={250} classNames=\"item\">\r\n            <li key={item.id}>\r\n              {item.name}: {item.number}\r\n              <button type=\"button\" onClick={() => deleteItem(item.id)}>\r\n                Delete\r\n              </button>\r\n            </li>\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    </>\r\n  );\r\n};\r\nContactList.propTypes = {\r\n  array: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  deleteItem: PropTypes.func.isRequired,\r\n};\r\nconst mapDispatchToProps = {\r\n  deleteItem: removeContact,\r\n};\r\n// ---------------------1-version-filtering-----\r\nconst handleFilter = (contacts, filter) => {\r\n  return contacts.filter(contactItem =>\r\n    contactItem.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\nconst mapStateToProps = state => {\r\n  // console.log(state.contacts.items);\r\n  return { array: handleFilter(state.contacts.items, state.contacts.filter) };\r\n};\r\n// ----------------------2-version-filtering- з диструктуризацією------------\r\n// const mapStateToProps = state => {\r\n//     const { items, filter } = state.contacts;\r\n//   const handleFilter = items.filter(contact =>\r\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n//   return {\r\n//     array: handleFilter,\r\n//   };\r\n// };\r\n// -----------------------3-version-filtering-без диструктуризації--------\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     array: state.contacts.items.filter(contact =>\r\n//       contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\r\n//     ),\r\n//   };\r\n// };\r\n// ---------------------------------\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\n\r\nimport classes from './ErrorMassage.module.css';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction ErrorMassage({ erroMasage }) {\r\n  return <div className={classes.errorMassage}>{erroMasage}</div>;\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  erroMasage: state.contacts.erroMasage,\r\n});\r\nexport default connect(mapStateToProps)(ErrorMassage);\r\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport ContactForm from './components/ContactForm/ContactForm.js';\nimport Filter from './components/Filter/Filter.js';\nimport ContactList from './components/ContactList/ContactList.js';\nimport ErrorMassage from './components/ErrorMassage/ErrorMassage.js';\nimport classes from './App.module.css';\nimport './bases.css';\nimport classesEror from './components/ErrorMassage/ErrorMassage.module.css';\n// import './components/ErrorMassage/ErrorMassage.module.css';\nimport { addContact } from './redux/actions/action.js';\nimport { connect } from 'react-redux';\nconsole.log(addContact.addContact);\nconsole.log(addContact);\n\nfunction App({ erroMasage }) {\n  console.log(erroMasage);\n\n  return (\n    <>\n      <div className={classes.conteiner}>\n        <ContactForm />\n\n        <Filter />\n\n        <ContactList />\n\n        <CSSTransition\n          in={!!erroMasage}\n          timeout={250}\n          appear={true}\n          // classNames=\"errorAnimation\"\n          classNames={{ ...classesEror }}\n          unmountOnExit\n        >\n          <ErrorMassage />\n        </CSSTransition>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = (state, props) => ({\n  erroMasage: state.contacts.erroMasage,\n});\n\nexport default connect(mapStateToProps)(App);\n","// import types from '../actionTypes.js';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// імпортуєм весь файл action.js і\r\n// редактуємо його як обєкт з імям actions\r\n// import actions from '../actions/action.js';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {\r\n  addContact,\r\n  removeContact,\r\n  changeFilter,\r\n  erroMasage,\r\n} from '../actions/action.js';\r\n// import {\r\n//   ADD_CONTACT,\r\n//   REMOVE_CONTACT,\r\n//   CHANGE_FILTER,\r\n//   ERROR_MESSAGE,\r\n// } from '../actionTypes.js';\r\n// const { ADD_CONTACT, REMOVE_CONTACT } = types;\r\nimport { combineReducers } from 'redux';\r\n\r\n// диструктиризуєм наш обєкт actions\r\n// const { addContact, removeContact } = actions;\r\n// console.log(addContact, removeContact);\r\n\r\nconst initialState = {\r\n  items: JSON.parse(localStorage.getItem('contacts')) || [\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  ],\r\n  filter: '',\r\n  erroMasage: '',\r\n};\r\n// ----with Toolkit----\r\nconst CreateAddContact = (state, action) => {\r\n  return [...state, { ...action.payload, id: uuidv4() }];\r\n};\r\nconst CreateRemoveContact = (state, action) => {\r\n  return state.filter(item => {\r\n    return item.id !== action.payload;\r\n  });\r\n};\r\n\r\nconst itemsCreateReducer = createReducer(initialState.items, {\r\n  [addContact]: CreateAddContact,\r\n  [removeContact]: CreateRemoveContact,\r\n});\r\nconsole.log(itemsCreateReducer);\r\n\r\nconst filterCreateReducer = createReducer(initialState.filter, {\r\n  [changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nconst erroMasageCreateReducer = createReducer(initialState.erroMasage, {\r\n  [erroMasage]: (state, action) => action.payload,\r\n});\r\n\r\nexport const contactsReducer = combineReducers({\r\n  items: itemsCreateReducer,\r\n  filter: filterCreateReducer,\r\n  erroMasage: erroMasageCreateReducer,\r\n});\r\n\r\n// ----------without Toolkit--------------\r\n// export const itemsReducer = (state = initialState.items, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD_CONTACT:\r\n//       return [...state, { ...payload, id: uuidv4() }];\r\n\r\n//     case REMOVE_CONTACT:\r\n//       return state.filter(item => {\r\n//         return item.id !== payload;\r\n//       });\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const filterReducer = (\r\n//   state = initialState.filter,\r\n//   { type, payload },\r\n// ) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const erroMasageReducer = (\r\n//   state = initialState.erroMasage,\r\n//   { type, payload },\r\n// ) => {\r\n//   switch (type) {\r\n//     case ERROR_MESSAGE:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const contactsReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n//   erroMasage: erroMasageReducer,\r\n// });\r\n","// import { createStore } from 'redux';\r\n// import { combineReducers } from 'redux';\r\nimport { contactsReducer } from './reducers/reducer.js';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n// without Toolkit\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// ---------------\r\n\r\n// with Toolkit\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n// ---------------\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\r\n    'contacts',\r\n    JSON.stringify(store.getState().contacts.items),\r\n  );\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App.js';\nimport store from './redux/store.js';\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <React.StrictMode> */}\n    <App />\n    {/* </React.StrictMode>, */}\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}